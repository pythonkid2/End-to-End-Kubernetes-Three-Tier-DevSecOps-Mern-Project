pipeline {
    agent any 
    tools {
        nodejs 'nodejs'
    }
    environment  {
        SCANNER_HOME=tool 'sonar-scanner'
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')
        AWS_ECR_REPO_NAME = credentials('ECR_REPO1')
        AWS_DEFAULT_REGION = 'us-east-1'
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/pythonkid2/End-to-End-Kubernetes-Three-Tier-DevSecOps-Mern-Project.git'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/frontend') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=frontend \
                        -Dsonar.projectKey=frontend '''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token' 
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/frontend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/frontend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/frontend') {
                            sh 'docker system prune -f'
                            sh 'docker container prune -f'
                            sh 'docker build -t ${AWS_ECR_REPO_NAME} .'
                    }
                }
            }
        }
        stage("ECR Image Pushing") {
            steps {
                script {
                        sh 'aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${REPOSITORY_URI}'
                        sh 'docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                        sh 'docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt' 
            }
        }
        stage('Checkout Code') {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/pythonkid2/End-to-End-Kubernetes-Three-Tier-DevSecOps-Mern-Project.git'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Project"
                GIT_USER_NAME = "pythonkid2"
                GIT_BRANCH = "master"
            }
            steps {
                dir('Kubernetes-Manifests-file/Frontend') {
                    // Checkout the repo using SSH
                    checkout([$class: 'GitSCM',
                        branches: [[name: "*/${GIT_BRANCH}"]],
                        userRemoteConfigs: [[
                            url: "git@github.com:${GIT_USER_NAME}/${GIT_REPO_NAME}.git",
                            credentialsId: 'git-cred'
                        ]]
                    ])
        
                    // Use sshagent to push
                    sshagent(['git-cred']) {
                        sh '''
                            git config user.email "mjcmathew@gmail.com"
                            git config user.name "pythonkid2"
        
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo "Build Number: $BUILD_NUMBER"
        
                            imageTag=$(grep -oP '(?<=frontend:)[^ ]+' deployment.yaml || echo "none")
                            echo "Current image tag: $imageTag"
        
                            if [ "$imageTag" != "$BUILD_NUMBER" ]; then
                                sed -i "s|${AWS_ECR_REPO_NAME}:${imageTag}|${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml
                                git add deployment.yaml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"
                                git push origin ${GIT_BRANCH}
                            else
                                echo "Image tag already up-to-date, no changes made."
                            fi
                        '''
                    }
                }
            }
        }

    }
}

