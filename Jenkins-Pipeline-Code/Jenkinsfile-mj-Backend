pipeline {
    agent any  // This means the pipeline can run on any available Jenkins agent node

    // Declare the tools Jenkins should set up in this job
    tools {
        nodejs 'nodejs'  // Use the Node.js version configured in Jenkins global tools
    }

    // Set up environment variables that will be used throughout the pipeline
    environment {
        SCANNER_HOME = tool 'sonar-scanner'  // Location of the SonarQube scanner tool
        AWS_ACCOUNT_ID = credentials('ACCOUNT_ID')  // Your AWS account ID (stored securely in Jenkins Credentials)
        AWS_ECR_REPO_NAME = credentials('ECR_REPO2')  // Name of the ECR repository for the backend
        AWS_DEFAULT_REGION = 'us-east-1'  // AWS region to use for pushing images
        REPOSITORY_URI = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/"  // Full URL to your private ECR repo
        GIT_REPO_NAME = "End-to-End-Kubernetes-Three-Tier-DevSecOps-Mern-Project"  // GitHub repo name
        GIT_USER_NAME = "pythonkid2"  // Your GitHub username
        GIT_BRANCH = "master"  // Target branch for code push
    }

    stages {

        // Cleans up the Jenkins workspace so that we start fresh
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }

        // Clones your GitHub repo using stored Jenkins credentials
        stage('Checkout from Git') {
            steps {
                git credentialsId: 'git-cred', url: 'https://github.com/pythonkid2/End-to-End-Kubernetes-Three-Tier-DevSecOps-Mern-Project.git'
            }
        }

        // Runs static code analysis using SonarQube to find bugs, code smells, vulnerabilities
        stage('Sonarqube Analysis') {
            steps {
                dir('Application-Code/backend') { // Go into the backend app folder
                    withSonarQubeEnv('sonar-server') { // Use Jenkins configured SonarQube server
                        sh '''
                            $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=three-tier-backend \
                            -Dsonar.projectKey=three-tier-backend
                        '''
                    }
                }
            }
        }

        // Waits for SonarQube to finish analyzing and checks if quality gate passed or failed
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonar-token'
                }
            }
        }

        // Scans backend project dependencies for known security issues
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('Application-Code/backend') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }

        // Scans file system (source code and project files) for vulnerabilities using Trivy
        stage('Trivy File Scan') {
            steps {
                dir('Application-Code/backend') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }

        // Builds the Docker image for backend service
        stage("Docker Image Build") {
            steps {
                script {
                    dir('Application-Code/backend') {
                        sh 'docker system prune -f'  // Cleans up unused Docker stuff
                        sh 'docker container prune -f' // Removes old stopped containers
                        sh 'docker build -t ${AWS_ECR_REPO_NAME} .'  // Builds Docker image
                    }
                }
            }
        }

        // Pushes the built image to AWS ECR
        stage("ECR Image Pushing") {
            steps {
                script {
                    sh '''
                        # Login to AWS ECR
                        aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | \
                        docker login --username AWS --password-stdin ${REPOSITORY_URI}

                        # Tag the image with build number
                        docker tag ${AWS_ECR_REPO_NAME} ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}

                        # Push it to ECR
                        docker push ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}
                    '''
                }
            }
        }

        // Trivy scans the pushed Docker image for vulnerabilities
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }

        // This stage updates the Kubernetes deployment.yaml with the new image version
        stage('Update Deployment file') {
            steps {
                dir('Kubernetes-Manifests-file/Backend') {
                    // Uses SSH agent with GitHub private key stored in Jenkins credentials
                    sshagent(['git-cred']) {
                        sh """
                            set -e  # Exit on any error
                            set -x  # Print all commands for debugging

                            git config user.email "mjcmathew@gmail.com"
                            git config user.name "pythonkid2"

                            echo "====== BEFORE UPDATE ======"
                            grep "image:" deployment.yaml || echo "No image line found"

                            # Extract current image tag from YAML (e.g., 25 from backend:25)
                            imageTag=\$(grep -oP "(?<=${AWS_ECR_REPO_NAME}:)[0-9]+" deployment.yaml || echo "none")
                            echo "Extracted imageTag: \$imageTag"

                            if [ "\$imageTag" != "${BUILD_NUMBER}" ]; then
                                currentImage="${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:\$imageTag"
                                newImage="${REPOSITORY_URI}${AWS_ECR_REPO_NAME}:${BUILD_NUMBER}"
                                echo "Replacing: \$currentImage --> \$newImage"

                                # Replace old image with new image tag in YAML file
                                sed -i "s|\$currentImage|\$newImage|" deployment.yaml

                                echo "====== AFTER UPDATE ======"
                                grep "image:" deployment.yaml

                                echo "====== GIT DIFF ======"
                                git diff deployment.yaml || echo "No changes detected by git diff"

                                # Commit and push the updated YAML back to GitHub
                                git add deployment.yaml
                                git commit -m "Update deployment image to version ${BUILD_NUMBER}" || echo "Nothing to commit"
                                git remote set-url origin git@github.com:${GIT_USER_NAME}/${GIT_REPO_NAME}.git
                                git push origin ${GIT_BRANCH}
                            else
                                echo "Image tag already up-to-date, no changes made."
                            fi
                        """
                    }
                }
            }
        }
    }
}
